// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VERTEXIMAGEMAPPING_VERTEXIMAGEMAPPING_H_
#define FLATBUFFERS_GENERATED_VERTEXIMAGEMAPPING_VERTEXIMAGEMAPPING_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace VertexImageMapping {

struct VertexImageMap;
struct VertexImageMapBuilder;

struct VertexImageMap FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VertexImageMapBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTEX_MAP = 4
  };
  const ::flatbuffers::Vector<uint32_t> *vertex_map() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_VERTEX_MAP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTEX_MAP) &&
           verifier.VerifyVector(vertex_map()) &&
           verifier.EndTable();
  }
};

struct VertexImageMapBuilder {
  typedef VertexImageMap Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertex_map(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> vertex_map) {
    fbb_.AddOffset(VertexImageMap::VT_VERTEX_MAP, vertex_map);
  }
  explicit VertexImageMapBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VertexImageMap> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VertexImageMap>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VertexImageMap> CreateVertexImageMap(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> vertex_map = 0) {
  VertexImageMapBuilder builder_(_fbb);
  builder_.add_vertex_map(vertex_map);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<VertexImageMap> CreateVertexImageMapDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *vertex_map = nullptr) {
  auto vertex_map__ = vertex_map ? _fbb.CreateVector<uint32_t>(*vertex_map) : 0;
  return VertexImageMapping::CreateVertexImageMap(
      _fbb,
      vertex_map__);
}

inline const VertexImageMapping::VertexImageMap *GetVertexImageMap(const void *buf) {
  return ::flatbuffers::GetRoot<VertexImageMapping::VertexImageMap>(buf);
}

inline const VertexImageMapping::VertexImageMap *GetSizePrefixedVertexImageMap(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<VertexImageMapping::VertexImageMap>(buf);
}

inline const char *VertexImageMapIdentifier() {
  return "vmap";
}

inline bool VertexImageMapBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, VertexImageMapIdentifier());
}

inline bool SizePrefixedVertexImageMapBufferHasIdentifier(const void *buf) {
  return ::flatbuffers::BufferHasIdentifier(
      buf, VertexImageMapIdentifier(), true);
}

inline bool VerifyVertexImageMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<VertexImageMapping::VertexImageMap>(VertexImageMapIdentifier());
}

inline bool VerifySizePrefixedVertexImageMapBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<VertexImageMapping::VertexImageMap>(VertexImageMapIdentifier());
}

inline const char *VertexImageMapExtension() {
  return "vmap";
}

inline void FinishVertexImageMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VertexImageMapping::VertexImageMap> root) {
  fbb.Finish(root, VertexImageMapIdentifier());
}

inline void FinishSizePrefixedVertexImageMapBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<VertexImageMapping::VertexImageMap> root) {
  fbb.FinishSizePrefixed(root, VertexImageMapIdentifier());
}

}  // namespace VertexImageMapping

#endif  // FLATBUFFERS_GENERATED_VERTEXIMAGEMAPPING_VERTEXIMAGEMAPPING_H_
